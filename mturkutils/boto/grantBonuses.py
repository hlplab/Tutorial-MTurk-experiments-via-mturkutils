#!/usr/bin/env python

# Copyright (c) 2012-2017 Andrew Watts and the University of Rochester BCS Department
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Pays out bonuses to Amazon Mechanical Turk workers based on 'bonus.<expt_name>.csv'
as generated by calculate_bonus.py
"""

import argparse

import unicodecsv as csv
from boto.exception import AWSConnectionError, EC2ResponseError
from boto.mturk.connection import MTurkConnection
from boto.mturk.price import Price

__author__ = 'Andrew Watts <awatts2@ur.rochester.edu>'

parser = argparse.ArgumentParser(description='Grant bonuses for HITs on Amazon Mechanical Turk')
parser.add_argument('-experiment', required=True,
                    help='(required) The name of the experiment you are granting bonuses for')
parser.add_argument('-p', '--profile',
                    help='Run commands using specific aws credentials rather the default. To set-up alternative credentials see http://boto3.readthedocs.org/en/latest/guide/configuration.html#shared-credentials-file')
args = parser.parse_args()

try:
    conn = MTurkConnection(is_secure=True, profile_name=args.profile)
    mtbal = conn.get_account_balance()
    if len(mtbal) == 1:
        print("Available balance: ", mtbal[0])
    elif len(mtbal) == 2:
        print("Available balance: ", mtbal[0])
        print("OnHold balance: ", mtbal[1])
    avbal = mtbal[0]

    # if (bonuscost > avbal.amount):
    #    print "Insufficient funds to pay bonuses! Add $%.2f to your account before proceeding" % (bonuscost - avbal.amount)
    # else:
    with open('bonus.' + args.expt_name + '.csv', 'r') as csvinfile:
        fields = ('worker', 'trials', 'bonus', 'assignment')
        bonuses = csv.DictReader(csvinfile, fieldnames=fields, encoding='utf-8')
        bonuses.next()  # pop off the header row
        for row in bonuses:
            price = Price(amount=row['bonus'])
            worker_id = row['worker']
            assignment_id = row['assignment']
            trial_count = row['trials']
            print("Paying ${0} bonus to {1} for {2} trials including {3}".format(price, worker_id, trial_count,
                                                                                 assignment_id))
            try:
                # conn.grant_bonus(worker_id, assignment_id, price, "For doing {0} HITs".format(trial_count))
                conn.grant_bonus(worker_id, assignment_id, price, "For doing {0} trials".format(trial_count))
            except EC2ResponseError as e:
                print("Error!\n\tStatus: %s\n\tReason: %s\n\tBody: %s") % (e.status, e.reason, e.body)
except AWSConnectionError as reason:
    print("Connection problem: ", reason)
    import sys

    sys.exit()
